// MIT License
//
// Copyright(c) 2022 Matthieu Bucchianeri
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this softwareand associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright noticeand this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "pch.h"

#define CHECK_VKCMD(cmd) xr::detail::_CheckVKResult(cmd, #cmd, FILE_AND_LINE)

namespace xr::detail {

    [[noreturn]] inline void _ThrowVKResult(VkResult vks,
                                            const char* originator = nullptr,
                                            const char* sourceLocation = nullptr) {
        xr::detail::_Throw(xr::detail::_Fmt("VkStatus failure [%x]", vks), originator, sourceLocation);
    }

    inline HRESULT _CheckVKResult(VkResult nvs,
                                  const char* originator = nullptr,
                                  const char* sourceLocation = nullptr) {
        if ((nvs) != VK_SUCCESS) {
            xr::detail::_ThrowVKResult(nvs, originator, sourceLocation);
        }

        return nvs;
    }

} // namespace xr::detail

namespace vulkan_d3d12_interop::util {

    struct VkFormatMapping {
        DXGI_FORMAT dxgi;
        VkFormat vk;
    };

    struct GlFormatMapping {
        DXGI_FORMAT dxgi;
        GLint gl;
        size_t size;
    };

    // Based on https://github.com/doitsujin/dxvk/blob/master/src/dxgi/dxgi_format.cpp
    const VkFormatMapping DxgiToVkFormat[] = {
        {DXGI_FORMAT_R32G32B32A32_FLOAT, VK_FORMAT_R32G32B32A32_SFLOAT},
        {DXGI_FORMAT_R32G32B32A32_UINT, VK_FORMAT_R32G32B32A32_UINT},
        {DXGI_FORMAT_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_SINT},
        {DXGI_FORMAT_R32G32B32_FLOAT, VK_FORMAT_R32G32B32_SFLOAT},
        {DXGI_FORMAT_R32G32B32_UINT, VK_FORMAT_R32G32B32_UINT},
        {DXGI_FORMAT_R32G32B32_SINT, VK_FORMAT_R32G32B32_SINT},
        {DXGI_FORMAT_R16G16B16A16_FLOAT, VK_FORMAT_R16G16B16A16_SFLOAT},
        {DXGI_FORMAT_R16G16B16A16_UNORM, VK_FORMAT_R16G16B16A16_UNORM},
        {DXGI_FORMAT_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UINT},
        {DXGI_FORMAT_R16G16B16A16_SNORM, VK_FORMAT_R16G16B16A16_SNORM},
        {DXGI_FORMAT_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SINT},
        {DXGI_FORMAT_R32G32_FLOAT, VK_FORMAT_R32G32_SFLOAT},
        {DXGI_FORMAT_R32G32_UINT, VK_FORMAT_R32G32_UINT},
        {DXGI_FORMAT_R32G32_SINT, VK_FORMAT_R32G32_SINT},
        {DXGI_FORMAT_D32_FLOAT_S8X24_UINT, VK_FORMAT_D32_SFLOAT_S8_UINT},
        {DXGI_FORMAT_R10G10B10A2_UNORM, VK_FORMAT_A2B10G10R10_UNORM_PACK32},
        {DXGI_FORMAT_R10G10B10A2_UINT, VK_FORMAT_A2B10G10R10_UINT_PACK32},
        {DXGI_FORMAT_R11G11B10_FLOAT, VK_FORMAT_B10G11R11_UFLOAT_PACK32},
        {DXGI_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_UNORM},
        {DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, VK_FORMAT_R8G8B8A8_SRGB},
        {DXGI_FORMAT_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UINT},
        {DXGI_FORMAT_R8G8B8A8_SNORM, VK_FORMAT_R8G8B8A8_SNORM},
        {DXGI_FORMAT_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SINT},
        {DXGI_FORMAT_R16G16_FLOAT, VK_FORMAT_R16G16_SFLOAT},
        {DXGI_FORMAT_R16G16_UNORM, VK_FORMAT_R16G16_UNORM},
        {DXGI_FORMAT_R16G16_UINT, VK_FORMAT_R16G16_UINT},
        {DXGI_FORMAT_R16G16_SNORM, VK_FORMAT_R16G16_SNORM},
        {DXGI_FORMAT_R16G16_SINT, VK_FORMAT_R16G16_SINT},
        {DXGI_FORMAT_D32_FLOAT, VK_FORMAT_D32_SFLOAT},
        {DXGI_FORMAT_R32_FLOAT, VK_FORMAT_R32_SFLOAT},
        {DXGI_FORMAT_R32_UINT, VK_FORMAT_R32_UINT},
        {DXGI_FORMAT_R32_SINT, VK_FORMAT_R32_SINT},
        {DXGI_FORMAT_D24_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT},
        {DXGI_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_UNORM},
        {DXGI_FORMAT_R8G8_UINT, VK_FORMAT_R8G8_UINT},
        {DXGI_FORMAT_R8G8_SNORM, VK_FORMAT_R8G8_SNORM},
        {DXGI_FORMAT_R8G8_SINT, VK_FORMAT_R8G8_SINT},
        {DXGI_FORMAT_R16_FLOAT, VK_FORMAT_R16_SFLOAT},
        {DXGI_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM},
        {DXGI_FORMAT_R16_UNORM, VK_FORMAT_R16_UNORM},
        {DXGI_FORMAT_R16_UINT, VK_FORMAT_R16_UINT},
        {DXGI_FORMAT_R16_SNORM, VK_FORMAT_R16_SNORM},
        {DXGI_FORMAT_R16_SINT, VK_FORMAT_R16_SINT},
        {DXGI_FORMAT_R8_UNORM, VK_FORMAT_R8_UNORM},
        {DXGI_FORMAT_R8_UINT, VK_FORMAT_R8_UINT},
        {DXGI_FORMAT_R8_SNORM, VK_FORMAT_R8_SNORM},
        {DXGI_FORMAT_R8_SINT, VK_FORMAT_R8_SINT},
        {DXGI_FORMAT_A8_UNORM, VK_FORMAT_R8_UNORM},
        {DXGI_FORMAT_R9G9B9E5_SHAREDEXP, VK_FORMAT_E5B9G9R9_UFLOAT_PACK32},
        {DXGI_FORMAT_R8G8_B8G8_UNORM, VK_FORMAT_B8G8R8G8_422_UNORM},
        {DXGI_FORMAT_G8R8_G8B8_UNORM, VK_FORMAT_G8B8G8R8_422_UNORM},
        {DXGI_FORMAT_BC1_UNORM, VK_FORMAT_BC1_RGBA_UNORM_BLOCK},
        {DXGI_FORMAT_BC1_UNORM_SRGB, VK_FORMAT_BC1_RGBA_SRGB_BLOCK},
        {DXGI_FORMAT_BC2_UNORM, VK_FORMAT_BC2_UNORM_BLOCK},
        {DXGI_FORMAT_BC2_UNORM_SRGB, VK_FORMAT_BC2_SRGB_BLOCK},
        {DXGI_FORMAT_BC3_UNORM, VK_FORMAT_BC3_UNORM_BLOCK},
        {DXGI_FORMAT_BC3_UNORM_SRGB, VK_FORMAT_BC3_SRGB_BLOCK},
        {DXGI_FORMAT_BC4_UNORM, VK_FORMAT_BC4_UNORM_BLOCK},
        {DXGI_FORMAT_BC4_SNORM, VK_FORMAT_BC4_SNORM_BLOCK},
        {DXGI_FORMAT_BC5_UNORM, VK_FORMAT_BC5_UNORM_BLOCK},
        {DXGI_FORMAT_BC5_SNORM, VK_FORMAT_BC5_SNORM_BLOCK},
        {DXGI_FORMAT_B5G6R5_UNORM, VK_FORMAT_R5G6B5_UNORM_PACK16},
        {DXGI_FORMAT_B5G5R5A1_UNORM, VK_FORMAT_A1R5G5B5_UNORM_PACK16},
        {DXGI_FORMAT_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8A8_UNORM},
        {DXGI_FORMAT_B8G8R8X8_UNORM, VK_FORMAT_B8G8R8A8_UNORM},
        {DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, VK_FORMAT_B8G8R8A8_SRGB},
        {DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, VK_FORMAT_B8G8R8A8_SRGB},
        {DXGI_FORMAT_BC6H_UF16, VK_FORMAT_BC6H_UFLOAT_BLOCK},
        {DXGI_FORMAT_BC6H_SF16, VK_FORMAT_BC6H_SFLOAT_BLOCK},
        {DXGI_FORMAT_BC7_UNORM, VK_FORMAT_BC7_UNORM_BLOCK},
        {DXGI_FORMAT_BC7_UNORM_SRGB, VK_FORMAT_BC7_SRGB_BLOCK},
        {DXGI_FORMAT_AYUV, VK_FORMAT_R8G8B8A8_UNORM},
        {DXGI_FORMAT_Y410, VK_FORMAT_G8_B8R8_2PLANE_420_UNORM},
        {DXGI_FORMAT_420_OPAQUE, VK_FORMAT_G8_B8R8_2PLANE_420_UNORM},
        {DXGI_FORMAT_YUY2, VK_FORMAT_G8B8G8R8_422_UNORM},
        {DXGI_FORMAT_B4G4R4A4_UNORM, VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT},
    };

    // Based on
    // https://chromium.googlesource.com/angle/angle/+/34cc136a689711ee7f64f90b2de9b07cfb9a9f17/src/libANGLE/renderer/d3d/d3d11/formatutils11.cpp
    const GlFormatMapping DxgiToGlFormat[] = {
        {DXGI_FORMAT_A8_UNORM, GL_ALPHA8_EXT, 1},
        {DXGI_FORMAT_R8_UNORM, GL_R8, 1},
        {DXGI_FORMAT_R8G8_UNORM, GL_RG8, 2},
        {DXGI_FORMAT_R8G8B8A8_UNORM, GL_RGBA8, 4},
        {DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, GL_SRGB8_ALPHA8, 4},
        {DXGI_FORMAT_R8_SNORM, GL_R8_SNORM, 1},
        {DXGI_FORMAT_R8G8_SNORM, GL_RG8_SNORM, 2},
        {DXGI_FORMAT_R8G8B8A8_SNORM, GL_RGBA8_SNORM, 4},
        {DXGI_FORMAT_R8_UINT, GL_R8UI, 1},
        {DXGI_FORMAT_R16_UINT, GL_R16UI, 2},
        {DXGI_FORMAT_R32_UINT, GL_R32UI, 4},
        {DXGI_FORMAT_R8G8_UINT, GL_RG8UI, 2},
        {DXGI_FORMAT_R16G16_UINT, GL_RG16UI, 4},
        {DXGI_FORMAT_R32G32_UINT, GL_RG32UI, 8},
        {DXGI_FORMAT_R32G32B32_UINT, GL_RGB32UI, 12},
        {DXGI_FORMAT_R8G8B8A8_UINT, GL_RGBA8UI, 4},
        {DXGI_FORMAT_R16G16B16A16_UINT, GL_RGBA16UI, 8},
        {DXGI_FORMAT_R32G32B32A32_UINT, GL_RGBA32UI, 16},
        {DXGI_FORMAT_R8_SINT, GL_R8I, 1},
        {DXGI_FORMAT_R16_SINT, GL_R16I, 2},
        {DXGI_FORMAT_R32_SINT, GL_R32I, 4},
        {DXGI_FORMAT_R8G8_SINT, GL_RG8I, 2},
        {DXGI_FORMAT_R16G16_SINT, GL_RG16I, 4},
        {DXGI_FORMAT_R32G32_SINT, GL_RG32I, 8},
        {DXGI_FORMAT_R32G32B32_SINT, GL_RGB32I, 12},
        {DXGI_FORMAT_R8G8B8A8_SINT, GL_RGBA8I, 4},
        {DXGI_FORMAT_R16G16B16A16_SINT, GL_RGBA16I, 8},
        {DXGI_FORMAT_R32G32B32A32_SINT, GL_RGBA32I, 16},
        {DXGI_FORMAT_R10G10B10A2_UNORM, GL_RGB10_A2, 4},
        {DXGI_FORMAT_R10G10B10A2_UINT, GL_RGB10_A2UI, 4},
        {DXGI_FORMAT_R16_FLOAT, GL_R16F, 2},
        {DXGI_FORMAT_R16G16_FLOAT, GL_RG16F, 4},
        {DXGI_FORMAT_R16G16B16A16_FLOAT, GL_RGBA16F, 8},
        {DXGI_FORMAT_R32_FLOAT, GL_R32F, 4},
        {DXGI_FORMAT_R32G32_FLOAT, GL_RG32F, 8},
        {DXGI_FORMAT_R32G32B32_FLOAT, GL_RGB32F, 12},
        {DXGI_FORMAT_R32G32B32A32_FLOAT, GL_RGBA32F, 16},
        {DXGI_FORMAT_R9G9B9E5_SHAREDEXP, GL_RGB9_E5, 4},
        {DXGI_FORMAT_R11G11B10_FLOAT, GL_R11F_G11F_B10F, 4},
        {DXGI_FORMAT_R16_TYPELESS, GL_DEPTH_COMPONENT16, 2},
        {DXGI_FORMAT_R16_UNORM, GL_DEPTH_COMPONENT16, 2},
        {DXGI_FORMAT_D16_UNORM, GL_DEPTH_COMPONENT16, 2},
        {DXGI_FORMAT_D24_UNORM_S8_UINT, GL_DEPTH24_STENCIL8, 4},
        {DXGI_FORMAT_D32_FLOAT_S8X24_UINT, GL_DEPTH32F_STENCIL8, 8},
        {DXGI_FORMAT_D32_FLOAT, GL_DEPTH_COMPONENT32F, 4},
        {DXGI_FORMAT_BC1_UNORM, GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, 4},
    };

} // namespace vulkan_d3d12_interop::util