// MIT License
//
// Copyright(c) 2022 Matthieu Bucchianeri
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this softwareand associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright noticeand this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "pch.h"

#define CHECK_VKCMD(cmd) xr::detail::_CheckVKResult(cmd, #cmd, FILE_AND_LINE)

namespace xr::detail {

    [[noreturn]] inline void _ThrowNVResult(VkResult vks,
                                            const char* originator = nullptr,
                                            const char* sourceLocation = nullptr) {
        xr::detail::_Throw(xr::detail::_Fmt("VkStatus failure [%x]", vks), originator, sourceLocation);
    }

    inline HRESULT _CheckVKResult(VkResult nvs,
                                  const char* originator = nullptr,
                                  const char* sourceLocation = nullptr) {
        if ((nvs) != VK_SUCCESS) {
            xr::detail::_ThrowNVResult(nvs, originator, sourceLocation);
        }

        return nvs;
    }

} // namespace xr::detail

namespace vulkan_d3d12_interop::util {

    // See https://github.com/doitsujin/dxvk/blob/master/src/dxgi/dxgi_format.cpp
    const std::array<VkFormat, 133> DxgiToVkFormat = {
        // DXGI_FORMAT_UNKNOWN
        VK_FORMAT_UNDEFINED,
        // DXGI_FORMAT_R32G32B32A32_TYPELESS
        VK_FORMAT_R32G32B32A32_UINT,
        // DXGI_FORMAT_R32G32B32A32_FLOAT
        VK_FORMAT_R32G32B32A32_SFLOAT,
        // DXGI_FORMAT_R32G32B32A32_UINT
        VK_FORMAT_R32G32B32A32_UINT,
        // DXGI_FORMAT_R32G32B32A32_SINT
        VK_FORMAT_R32G32B32A32_SINT,
        // DXGI_FORMAT_R32G32B32_TYPELESS
        VK_FORMAT_R32G32B32_UINT,
        // DXGI_FORMAT_R32G32B32_FLOAT
        VK_FORMAT_R32G32B32_SFLOAT,
        // DXGI_FORMAT_R32G32B32_UINT
        VK_FORMAT_R32G32B32_UINT,
        // DXGI_FORMAT_R32G32B32_SINT
        VK_FORMAT_R32G32B32_SINT,
        // DXGI_FORMAT_R16G16B16A16_TYPELESS
        VK_FORMAT_R16G16B16A16_UNORM,
        // DXGI_FORMAT_R16G16B16A16_FLOAT
        VK_FORMAT_R16G16B16A16_SFLOAT,
        // DXGI_FORMAT_R16G16B16A16_UNORM
        VK_FORMAT_R16G16B16A16_UNORM,
        // DXGI_FORMAT_R16G16B16A16_UINT
        VK_FORMAT_R16G16B16A16_UINT,
        // DXGI_FORMAT_R16G16B16A16_SNORM
        VK_FORMAT_R16G16B16A16_SNORM,
        // DXGI_FORMAT_R16G16B16A16_SINT
        VK_FORMAT_R16G16B16A16_SINT,
        // DXGI_FORMAT_R32G32_TYPELESS
        VK_FORMAT_R32G32_UINT,
        // DXGI_FORMAT_R32G32_FLOAT
        VK_FORMAT_R32G32_SFLOAT,
        // DXGI_FORMAT_R32G32_UINT
        VK_FORMAT_R32G32_UINT,
        // DXGI_FORMAT_R32G32_SINT
        VK_FORMAT_R32G32_SINT,
        // DXGI_FORMAT_R32G8X24_TYPELESS
        VK_FORMAT_D32_SFLOAT_S8_UINT,
        // DXGI_FORMAT_D32_FLOAT_S8X24_UINT
        VK_FORMAT_D32_SFLOAT_S8_UINT,
        // DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
        VK_FORMAT_D32_SFLOAT_S8_UINT,
        // DXGI_FORMAT_X32_TYPELESS_G8X24_UINT
        VK_FORMAT_D32_SFLOAT_S8_UINT,
        // DXGI_FORMAT_R10G10B10A2_TYPELESS
        VK_FORMAT_A2B10G10R10_UNORM_PACK32,
        // DXGI_FORMAT_R10G10B10A2_UNORM
        VK_FORMAT_A2B10G10R10_UNORM_PACK32,
        // DXGI_FORMAT_R10G10B10A2_UINT
        VK_FORMAT_A2B10G10R10_UINT_PACK32,
        // DXGI_FORMAT_R11G11B10_FLOAT
        VK_FORMAT_B10G11R11_UFLOAT_PACK32,
        // DXGI_FORMAT_R8G8B8A8_TYPELESS
        VK_FORMAT_R8G8B8A8_UNORM,
        // DXGI_FORMAT_R8G8B8A8_UNORM
        VK_FORMAT_R8G8B8A8_UNORM,
        // DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
        VK_FORMAT_R8G8B8A8_SRGB,
        // DXGI_FORMAT_R8G8B8A8_UINT
        VK_FORMAT_R8G8B8A8_UINT,
        // DXGI_FORMAT_R8G8B8A8_SNORM
        VK_FORMAT_R8G8B8A8_SNORM,
        // DXGI_FORMAT_R8G8B8A8_SINT
        VK_FORMAT_R8G8B8A8_SINT,
        // DXGI_FORMAT_R16G16_TYPELESS
        VK_FORMAT_R16G16_UNORM,
        // DXGI_FORMAT_R16G16_FLOAT
        VK_FORMAT_R16G16_SFLOAT,
        // DXGI_FORMAT_R16G16_UNORM
        VK_FORMAT_R16G16_UNORM,
        // DXGI_FORMAT_R16G16_UINT
        VK_FORMAT_R16G16_UINT,
        // DXGI_FORMAT_R16G16_SNORM
        VK_FORMAT_R16G16_SNORM,
        // DXGI_FORMAT_R16G16_SINT
        VK_FORMAT_R16G16_SINT,
        // DXGI_FORMAT_R32_TYPELESS
        VK_FORMAT_R32_UINT,
        // DXGI_FORMAT_D32_FLOAT
        VK_FORMAT_D32_SFLOAT,
        // DXGI_FORMAT_R32_FLOAT
        VK_FORMAT_R32_SFLOAT,
        // DXGI_FORMAT_R32_UINT
        VK_FORMAT_R32_UINT,
        // DXGI_FORMAT_R32_SINT
        VK_FORMAT_R32_SINT,
        // DXGI_FORMAT_R24G8_TYPELESS
        VK_FORMAT_D24_UNORM_S8_UINT,
        // DXGI_FORMAT_D24_UNORM_S8_UINT
        VK_FORMAT_D24_UNORM_S8_UINT,
        // DXGI_FORMAT_R24_UNORM_X8_TYPELESS
        VK_FORMAT_D24_UNORM_S8_UINT,
        // DXGI_FORMAT_X24_TYPELESS_G8_UINT
        VK_FORMAT_D24_UNORM_S8_UINT,
        // DXGI_FORMAT_R8G8_TYPELESS
        VK_FORMAT_R8G8_UNORM,
        // DXGI_FORMAT_R8G8_UNORM
        VK_FORMAT_R8G8_UNORM,
        // DXGI_FORMAT_R8G8_UINT
        VK_FORMAT_R8G8_UINT,
        // DXGI_FORMAT_R8G8_SNORM
        VK_FORMAT_R8G8_SNORM,
        // DXGI_FORMAT_R8G8_SINT
        VK_FORMAT_R8G8_SINT,
        // DXGI_FORMAT_R16_TYPELESS
        VK_FORMAT_R16_UNORM,
        // DXGI_FORMAT_R16_FLOAT
        VK_FORMAT_R16_SFLOAT,
        // DXGI_FORMAT_D16_UNORM
        VK_FORMAT_D16_UNORM,
        // DXGI_FORMAT_R16_UNORM
        VK_FORMAT_R16_UNORM,
        // DXGI_FORMAT_R16_UINT
        VK_FORMAT_R16_UINT,
        // DXGI_FORMAT_R16_SNORM
        VK_FORMAT_R16_SNORM,
        // DXGI_FORMAT_R16_SINT
        VK_FORMAT_R16_SINT,
        // DXGI_FORMAT_R8_TYPELESS
        VK_FORMAT_R8_UNORM,
        // DXGI_FORMAT_R8_UNORM
        VK_FORMAT_R8_UNORM,
        // DXGI_FORMAT_R8_UINT
        VK_FORMAT_R8_UINT,
        // DXGI_FORMAT_R8_SNORM
        VK_FORMAT_R8_SNORM,
        // DXGI_FORMAT_R8_SINT
        VK_FORMAT_R8_SINT,
        // DXGI_FORMAT_A8_UNORM
        VK_FORMAT_R8_UNORM,
        // DXGI_FORMAT_R1_UNORM
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_R9G9B9E5_SHAREDEXP
        VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
        // DXGI_FORMAT_R8G8_B8G8_UNORM
        VK_FORMAT_B8G8R8G8_422_UNORM,
        // DXGI_FORMAT_G8R8_G8B8_UNORM
        VK_FORMAT_G8B8G8R8_422_UNORM,
        // DXGI_FORMAT_BC1_TYPELESS
        VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
        // DXGI_FORMAT_BC1_UNORM
        VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
        // DXGI_FORMAT_BC1_UNORM_SRGB
        VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
        // DXGI_FORMAT_BC2_TYPELESS
        VK_FORMAT_BC2_UNORM_BLOCK,
        // DXGI_FORMAT_BC2_UNORM
        VK_FORMAT_BC2_UNORM_BLOCK,
        // DXGI_FORMAT_BC2_UNORM_SRGB
        VK_FORMAT_BC2_SRGB_BLOCK,
        // DXGI_FORMAT_BC3_TYPELESS
        VK_FORMAT_BC3_UNORM_BLOCK,
        // DXGI_FORMAT_BC3_UNORM
        VK_FORMAT_BC3_UNORM_BLOCK,
        // DXGI_FORMAT_BC3_UNORM_SRGB
        VK_FORMAT_BC3_SRGB_BLOCK,
        // DXGI_FORMAT_BC4_TYPELESS
        VK_FORMAT_BC4_UNORM_BLOCK,
        // DXGI_FORMAT_BC4_UNORM
        VK_FORMAT_BC4_UNORM_BLOCK,
        // DXGI_FORMAT_BC4_SNORM
        VK_FORMAT_BC4_SNORM_BLOCK,
        // DXGI_FORMAT_BC5_TYPELESS
        VK_FORMAT_BC5_UNORM_BLOCK,
        // DXGI_FORMAT_BC5_UNORM
        VK_FORMAT_BC5_UNORM_BLOCK,
        // DXGI_FORMAT_BC5_SNORM
        VK_FORMAT_BC5_SNORM_BLOCK,
        // DXGI_FORMAT_B5G6R5_UNORM
        VK_FORMAT_R5G6B5_UNORM_PACK16,
        // DXGI_FORMAT_B5G5R5A1_UNORM
        VK_FORMAT_A1R5G5B5_UNORM_PACK16,
        // DXGI_FORMAT_B8G8R8A8_UNORM
        VK_FORMAT_B8G8R8A8_UNORM,
        // DXGI_FORMAT_B8G8R8X8_UNORM
        VK_FORMAT_B8G8R8A8_UNORM,
        // DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_B8G8R8A8_TYPELESS
        VK_FORMAT_B8G8R8A8_UNORM,
        // DXGI_FORMAT_B8G8R8A8_UNORM_SRGB
        VK_FORMAT_B8G8R8A8_SRGB,
        // DXGI_FORMAT_B8G8R8X8_TYPELESS
        VK_FORMAT_B8G8R8A8_UNORM,
        // DXGI_FORMAT_B8G8R8X8_UNORM_SRGB
        VK_FORMAT_B8G8R8A8_SRGB,
        // DXGI_FORMAT_BC6H_TYPELESS
        VK_FORMAT_BC6H_UFLOAT_BLOCK,
        // DXGI_FORMAT_BC6H_UF16
        VK_FORMAT_BC6H_UFLOAT_BLOCK,
        // DXGI_FORMAT_BC6H_SF16
        VK_FORMAT_BC6H_SFLOAT_BLOCK,
        // DXGI_FORMAT_BC7_TYPELESS
        VK_FORMAT_BC7_UNORM_BLOCK,
        // DXGI_FORMAT_BC7_UNORM
        VK_FORMAT_BC7_UNORM_BLOCK,
        // DXGI_FORMAT_BC7_UNORM_SRGB
        VK_FORMAT_BC7_SRGB_BLOCK,
        // DXGI_FORMAT_AYUV
        VK_FORMAT_R8G8B8A8_UNORM,
        // DXGI_FORMAT_Y410
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_Y416
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_NV12
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
        // DXGI_FORMAT_P010
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_P016
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_420_OPAQUE
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
        // DXGI_FORMAT_YUY2
        VK_FORMAT_G8B8G8R8_422_UNORM,
        // DXGI_FORMAT_Y210
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_Y216
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_NV11
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_AI44
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_IA44
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_P8
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_A8P8
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_B4G4R4A4_UNORM
        VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,
        // DXGI_FORMAT_P208
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_V208
        VK_FORMAT_UNDEFINED, // Unsupported
        // DXGI_FORMAT_V408
        VK_FORMAT_UNDEFINED, // Unsupported
    };

} // namespace vulkan_d3d12_interop::util