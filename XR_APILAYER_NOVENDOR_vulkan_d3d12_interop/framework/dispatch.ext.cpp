// MIT License
//
// Copyright(c) 2022 Matthieu Bucchianeri
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this softwareand associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright noticeand this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// TODO: This should be auto-generated by the dispatch layer, but today our generator only looks at core
// spec.

static XrResult wrapper_xrGetVulkanInstanceExtensionsKHR(
    XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    DebugLog("--> xrGetVulkanInstanceExtensionsKHR\n");

    XrResult result;
    try {
        result =
            dynamic_cast<OpenXrLayer*>(GetInstance())
                ->xrGetVulkanInstanceExtensionsKHR(instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrGetVulkanInstanceExtensionsKHR %d\n", result);
    return result;
}

static XrResult wrapper_xrGetVulkanDeviceExtensionsKHR(
    XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    DebugLog("--> xrGetVulkanDeviceExtensionsKHR\n");

    XrResult result;
    try {
        result =
            dynamic_cast<OpenXrLayer*>(GetInstance())
                ->xrGetVulkanDeviceExtensionsKHR(instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrGetVulkanDeviceExtensionsKHR %d\n", result);
    return result;
}

static XrResult wrapper_xrGetVulkanGraphicsDeviceKHR(XrInstance instance,
                                                     XrSystemId systemId,
                                                     VkInstance vkInstance,
                                                     VkPhysicalDevice* vkPhysicalDevice) {
    DebugLog("--> xrGetVulkanGraphicsDeviceKHR\n");

    XrResult result;
    try {
        result = dynamic_cast<OpenXrLayer*>(GetInstance())
                     ->xrGetVulkanGraphicsDeviceKHR(instance, systemId, vkInstance, vkPhysicalDevice);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrGetVulkanGraphicsDeviceKHR %d\n", result);
    return result;
}

static XrResult wrapper_xrCreateVulkanInstanceKHR(XrInstance instance,
                                                  const XrVulkanInstanceCreateInfoKHR* createInfo,
                                                  VkInstance* vulkanInstance,
                                                  VkResult* vulkanResult) {
    DebugLog("--> xrCreateVulkanInstanceKHR\n");

    XrResult result;
    try {
        result = dynamic_cast<OpenXrLayer*>(GetInstance())
                     ->xrCreateVulkanInstanceKHR(instance, createInfo, vulkanInstance, vulkanResult);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrCreateVulkanInstanceKHR %d\n", result);
    return result;
}

static XrResult wrapper_xrCreateVulkanDeviceKHR(XrInstance instance,
                                                const XrVulkanDeviceCreateInfoKHR* createInfo,
                                                VkDevice* vulkanDevice,
                                                VkResult* vulkanResult) {
    DebugLog("--> xrCreateVulkanDeviceKHR\n");

    XrResult result;
    try {
        result = dynamic_cast<OpenXrLayer*>(GetInstance())
                     ->xrCreateVulkanDeviceKHR(instance, createInfo, vulkanDevice, vulkanResult);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrCreateVulkanDeviceKHR %d\n", result);
    return result;
}

static XrResult wrapper_xrGetVulkanGraphicsDevice2KHR(XrInstance instance,
                                                      const XrVulkanGraphicsDeviceGetInfoKHR* getInfo,
                                                      VkPhysicalDevice* vulkanPhysicalDevice) {
    DebugLog("--> xrGetVulkanGraphicsDevice2KHR\n");

    XrResult result;
    try {
        result = dynamic_cast<OpenXrLayer*>(GetInstance())
                     ->xrGetVulkanGraphicsDevice2KHR(instance, getInfo, vulkanPhysicalDevice);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrGetVulkanGraphicsDevice2KHR %d\n", result);
    return result;
}

static XrResult wrapper_xrGetVulkanGraphicsRequirementsKHR(XrInstance instance,
                                                           XrSystemId systemId,
                                                           XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    DebugLog("--> xrGetVulkanGraphicsRequirementsKHR\n");

    XrResult result;
    try {
        result = dynamic_cast<OpenXrLayer*>(GetInstance())
                     ->xrGetVulkanGraphicsRequirementsKHR(instance, systemId, graphicsRequirements);
    } catch (std::exception& exc) {
        Log("%s\n", exc.what());
        result = XR_ERROR_RUNTIME_FAILURE;
    }

    DebugLog("<-- xrGetVulkanGraphicsRequirementsKHR %d\n", result);
    return result;
}
